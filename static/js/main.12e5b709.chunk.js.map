{"version":3,"sources":["api.ts","TodoContext.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","Error","status","statusText","json","TodoContext","createContext","todos","setTodos","_newTodos","isListLoading","setIsListLoading","_newState","isModalLoading","setIsModalLoading","isVisible","setIsVisible","query","setQuery","_newQuery","filterField","setFilterField","_newFilterField","todosForRender","selectedUser","setSelectedUser","_newUser","oppenModalWindow","_todo","user","setUser","selectedTodoId","setSelectedTodoId","_newTodoId","selectedTodo","closeModalWindow","TodoProvider","children","useState","useMemo","filteredTodos","filter","todo","completed","normalizedQuery","toLowerCase","trim","title","includes","getFiltered","find","id","useEffect","finally","userId","value","Provider","TodoItem","useContext","completeIcon","className","infoButton","classNames","type","onClick","TodoList","map","TodoFilter","clearButton","style","pointerEvents","action","method","onSubmit","event","preventDefault","onChange","target","placeholder","Loader","ListLoader","ModalLoader","TodoModal","todoStatus","href","email","name","VisibleTodoModal","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12e5b709.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  createContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { Todo } from './types/Todo';\nimport { getTodos, getUser } from './api';\nimport { User } from './types/User';\n\nconst TodoContext = createContext({\n  todos: [] as Todo[],\n  setTodos: (_newTodos: Todo[]) => { },\n  isListLoading: true,\n  setIsListLoading: (_newState: boolean) => { },\n  isModalLoading: false,\n  setIsModalLoading: (_newState: boolean) => { },\n  isVisible: false,\n  setIsVisible: (_newState: boolean) => { },\n  query: '',\n  setQuery: (_newQuery: string) => { },\n  filterField: '',\n  setFilterField: (_newFilterField: string) => { },\n  todosForRender: [] as Todo[],\n  selectedUser: 0,\n  setSelectedUser: (_newUser: number) => { },\n  oppenModalWindow: (_todo: Todo) => { },\n  user: {} as User,\n  setUser: (_newUser: User) => { },\n  selectedTodoId: 0,\n  setSelectedTodoId: (_newTodoId: number) => { },\n  selectedTodo: {} as Todo,\n  closeModalWindow: () => { },\n});\n\ntype Params = {\n  filterField: string,\n  query: string,\n};\n\nfunction getFiltered(todos: Todo[], { filterField, query }: Params) {\n  const filteredTodos = todos.filter(todo => {\n    switch (filterField) {\n      case 'all':\n        return todo;\n      case 'active':\n        return !todo.completed;\n      case 'completed':\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n\n  const normalizedQuery = query.toLowerCase().trim();\n\n  return filteredTodos.filter(todo => {\n    const normalizedTitle = todo.title.toLowerCase();\n\n    return normalizedTitle.includes(normalizedQuery);\n  });\n}\n\ntype Props = {\n  children: React.ReactNode,\n};\n\nconst TodoProvider: React.FC<Props> = ({ children }) => {\n  const [todos, setTodos] = useState<Todo[] | []>([]);\n  const [isListLoading, setIsListLoading] = useState(true);\n  const [isModalLoading, setIsModalLoading] = useState(true);\n  const [isVisible, setIsVisible] = useState(false);\n  const [query, setQuery] = useState('');\n  const [filterField, setFilterField] = useState('');\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [user, setUser] = useState<User>({} as User);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n\n  const todosForRender = useMemo(() => {\n    return getFiltered(todos, { filterField, query });\n  }, [query, filterField, todos]);\n\n  const selectedTodo = useMemo(() => {\n    return todos.find(todo => todo.id === selectedTodoId) || {} as Todo;\n  }, [selectedTodoId]);\n\n  useEffect(() => {\n    getTodos().then(setTodos).finally(() => setIsListLoading(false));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      getUser(selectedUser).then(setUser).finally(() => setIsModalLoading(false));\n    }\n  }, [selectedUser]);\n\n  const oppenModalWindow = (todo: Todo) => {\n    setIsModalLoading(true);\n    setIsVisible(true);\n    setSelectedUser(todo.userId);\n    setSelectedTodoId(todo.id);\n  };\n\n  const closeModalWindow = () => {\n    setIsVisible(false);\n    setSelectedUser(0);\n  };\n\n  const value = useMemo(() => ({\n    todos,\n    setTodos,\n    isListLoading,\n    setIsListLoading,\n    isModalLoading,\n    setIsModalLoading,\n    isVisible,\n    setIsVisible,\n    query,\n    setQuery,\n    filterField,\n    setFilterField,\n    todosForRender,\n    selectedUser,\n    setSelectedUser,\n    oppenModalWindow,\n    user,\n    setUser,\n    selectedTodoId,\n    setSelectedTodoId,\n    selectedTodo,\n    closeModalWindow,\n  }), [todos, isListLoading, query, filterField, isVisible, isModalLoading, selectedUser]);\n\n  return (\n    <TodoContext.Provider value={value}>\n      {children}\n    </TodoContext.Provider>\n  );\n};\n\nexport { TodoContext, TodoProvider };\n","import { useContext } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoContext } from '../../TodoContext';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const {\n    oppenModalWindow,\n    selectedTodoId,\n    isVisible,\n  } = useContext(TodoContext);\n  const completeIcon = (\n    <span className=\"icon\" data-cy=\"iconCompleted\">\n      <i className=\"fas fa-check\" />\n    </span>\n  );\n\n  const infoButton = selectedTodoId === todo.id && isVisible\n    ? (\n      <i className=\"far fa-eye-slash\" />\n    )\n    : (\n      <i className=\"far fa-eye\" />\n    );\n\n  return (\n    <tr data-cy=\"todo\" className=\"\">\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && completeIcon}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-success': todo.completed,\n          'has-text-danger': !todo.completed,\n        })}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            oppenModalWindow(todo);\n          }}\n        >\n          <span className=\"icon\">\n            {infoButton}\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React, { useContext } from 'react';\nimport { TodoContext } from '../../TodoContext';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList: React.FC = () => {\n  const { todosForRender } = useContext(TodoContext);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todosForRender.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useContext } from 'react';\nimport { TodoContext } from '../../TodoContext';\n\nexport const TodoFilter = () => {\n  const { setFilterField, setQuery, query } = useContext(TodoContext);\n  const clearQuery = () => {\n    setQuery('');\n  };\n\n  const clearButton = (\n    <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n      {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n      <button\n        data-cy=\"clearSearchButton\"\n        type=\"button\"\n        className=\"delete\"\n        onClick={clearQuery}\n      />\n    </span>\n  );\n\n  return (\n    <form\n      className=\"field has-addons\"\n      action=\"/todos\"\n      method=\"POST\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => setFilterField(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && clearButton}\n      </p>\n    </form>\n  );\n};\n","import React, { useContext } from 'react';\nimport './Loader.scss';\nimport { TodoContext } from '../../TodoContext';\n\nconst Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n\nexport const ListLoader = () => {\n  const { isListLoading } = useContext(TodoContext);\n\n  return (\n    <>\n      {isListLoading && <Loader />}\n    </>\n  );\n};\n\nexport const ModalLoader = () => {\n  const { isModalLoading } = useContext(TodoContext);\n\n  return (\n    <>\n      {isModalLoading && <Loader />}\n    </>\n  );\n};\n","import React, { useContext } from 'react';\nimport { ModalLoader } from '../Loader';\nimport { TodoContext } from '../../TodoContext';\n\nconst TodoModal: React.FC = () => {\n  const {\n    isModalLoading,\n    user,\n    selectedTodo,\n    closeModalWindow,\n  } = useContext(TodoContext);\n\n  const todoStatus = selectedTodo.completed\n    ? 'Done'\n    : 'Planned';\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isModalLoading ? (\n        <ModalLoader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModalWindow}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              <strong className=\"has-text-danger\">{todoStatus}</strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const VisibleTodoModal = () => {\n  const { isVisible } = useContext(TodoContext);\n\n  return (\n    <>\n      {isVisible && <TodoModal />}\n    </>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { VisibleTodoModal } from './components/TodoModal';\nimport { ListLoader } from './components/Loader';\nimport { TodoProvider } from './TodoContext';\n\nexport const App: React.FC = () => {\n  return (\n    <>\n      <TodoProvider>\n        <div className=\"section\">\n          <div className=\"container\">\n            <div className=\"box\">\n              <h1 className=\"title\">Todos:</h1>\n\n              <div className=\"block\">\n                <TodoFilter />\n              </div>\n\n              <div className=\"block\">\n                <TodoList />\n                <ListLoader />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <VisibleTodoModal />\n      </TodoProvider>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}